: ${USER_VERSION:=1.0}

function user_image_name(){
    if [[ $# -gt 0 ]]; then
        echo "Error: All arguments to user_image_name must come from an options file." >&2
        usage
        exit 1
    fi

    if [[ -z ${options_file} ]]; then
        echo "Error: must specify an options file in ${FUNCNAME[0]}." >&2
        exit 1
    fi

    local name
    name="$(jq -r '.name? // empty' ${options_file})"
    if [[ -z ${name} ]]; then
        echo "Error: Json file ${options_file} does not specify a name." >&2
        exit 1
    fi

    echo ${name}
}

function create_user() {
    local this_dir=$(realpath $(dirname "${BASH_SOURCE[0]}"))

    if [[ $# -gt 0 ]]; then
        echo "Error: All arguments to ${FUNCNAME[0]} must come from an options file." >&2
        usage
        exit 1
    fi

    if [[ -z ${options_file} ]]; then
        echo "Error: must specify an options file in ${FUNCNAME[0]}." >&2
        exit 1
    fi

    local tmp_dockerfile=$(mktemp "${this_dir}/dockerfile.XXXXXXXXXXXX")
    dockerfile_from_template ${this_dir}/ubuntu_dockerfile_template ${options_file} ${tmp_dockerfile}

    local image_name
    image_name=$(user_image_name)
    docker build \
           $(extra_docker_flags create ${options_file}) \
           -t ${image_name} \
           -f ${tmp_dockerfile} \
           ${proj_dir}

    rm ${tmp_dockerfile}
    cleanup_staging
}

function run_user(){
    if [[ $# -gt 0 ]]; then
        echo "Error: All arguments to ${FUNCNAME[0]} must come from an options file." >&2
        usage
        exit 1
    fi

    if [[ -z ${options_file} ]]; then
        echo "Error: must specify an options file in ${FUNCNAME[0]}." >&2
        exit 1
    fi

    local name="user_dev_env${RANDOM}"
    local to_run
    if [[ -z "$(jq '.cmd? // empty' ${options_file})" ]]; then
       # only run a shell on containers without a default cmd
       to_run=${SHELL}
    fi

    local image_name
    image_name=$(user_image_name)
    docker run -it \
           $(extra_docker_flags run ${options_file}) \
           --name ${name} \
           --rm \
           ${image_name} \
           ${to_run}
}

function attach_user(){
    if [[ -z ${options_file} ]]; then
        echo "Error: must specify an options file in ${FUNCNAME[0]}." >&2
        exit 1
    fi

    if [[ $# -gt 1 ]]; then
        echo "Error: Too many arguments to ${FUNCNAME[0]}. All arguments excpet command to run must come from an options file." >&2
        usage
        exit 1
    fi

    to_run=${SHELL}
    if [[ $# -eq 1 ]]; then
        to_run="${1}"
    fi

    local image_name
    image_name=$(user_image_name)
    # check for existing running container using the image
    local container_name
    container_name=$(docker ps --filter ancestor="${image_name}" -q)
    if [[ -n ${container_name} ]]; then
        docker exec -it "${container_name}" "${to_run}"
    else
        # start a new container
        local name="user_dev_env${RANDOM}"

        tmp_json=$(mktemp "${TMPDIR:-/tmp/}$(basename $0).XXXXXXXXXXXX")
        jq 'del(.detached)' ${options_file} > ${tmp_json}

        local home_mount
        if ! is_json_config_key_on "${options_file}" with_user_home; then
            home_mount=" --mount type=bind,source=/home/$(whoami),target=/home/$(whoami)"
        fi
        docker run -it \
               $(extra_docker_flags run ${tmp_json}) \
               --name ${name} \
               --rm \
               ${home_mount} \
               ${image_name} \
               "${to_run}"
        rm ${tmp_json}
    fi
}

# TBD: Remove this function and move it to the rippled package.
# This is a hack until the rippled package work is ready
function add_validator_token_user(){
    if [[ -z ${options_file} ]]; then
        echo "Error: must specify an options file in ${FUNCNAME[0]}" >&2
        exit 1
    fi

    if [[ $# -ne 1 ]]; then
        echo "Error: must specify validator token in ${FUNCNAME[0]}" >&2
    fi

    local validator_token="${1}"

    if echo "${validator_token}" | grep -q '\[validator_token\]'; then
        # sed script removes all lines from the start of validator_token up to and including the '[validator_token]' stanza
        # this is useful, as the validator-keys-tool adds text before the stanza
        # Note: the echo also combines all the lines into a single line
        validator_token=$(echo "${validator_token}" | sed '1,/\[validator_token\]/d' | sed 's/ //g')
    else
        # The echo combines all the lines into a single line
        validator_token=$(echo "${validator_token}" | sed 's/ //g')
    fi

    local name="user_validator_token${RANDOM}"

    local image_name
    image_name=$(user_image_name)
    local to_run="/opt/rippled_bld/rippled_docker_helpers.sh add_validator_token /opt/rippled/rippled.cfg ${validator_token}"
    docker run -it \
           $(extra_docker_flags run ${options_file}) \
           --name ${name} \
           --rm \
           ${image_name} \
           ${to_run}
}
